/*
 * Library based upon my api for scraping the internet.
 * Created by Syed Daanish.
 * this library works in coordination with my site.
 * please visit https://localhost/ for more information.
 */
"use strict";var requestDataByClassname,requestDataById,getPage,getData,requestDataByClassnameSync,requestDataByIdSync,getPageSync,getDataSync,scrapejs={HTML:"<mode=Html[object ScrapeJS]/>",TEXT:"<mode=Text[object ScrapeJS]/>"};navigator.onLine?(requestDataByClassname=function(dict,mode,suppressErrors=!1){return new Promise(((resolve,reject)=>{"string"!=typeof dict.address&&reject("address is not provided or is not a string type."),"string"!=typeof dict.class&&reject("class is not provided or is not a string type.");let url=dict.address.replace("&","[amp$").replace("=","[equ$");fetch("http://localhost/api.php?addr="+url+"&by=true").then((response=>response.text())).then((data_from_fetched=>{let data=data_from_fetched,err=" />\n<br />\n<b>Warning</b>:";if(data.includes(" />\n<br />\n<b>Warning</b>:"))throw"invalid request";try{if(null!=typeof window.DOMParser){var parser=new DOMParser;if(null!=(doc=parser.parseFromString(data,"text/html")))var html=doc;else{data=data.replace(/&/gi,"and");html=doc=parser.parseFromString(data,"text/xml")}}else{var doc;(doc=document.implementation.createHTMLDocument("")).write(data),doc.close;html=doc}}catch(err){throw"Error parsing html:\n"+err.message}let final_out=html.getElementsByClassName(dict.class);null!=final_out||suppressErrors?null==final_out&&suppressErrors&&resolve(void 0):reject("No elements found by the class "+dict.class);let output=[];if(mode==scrapejs.HTML);else if(mode==scrapejs.TEXT){for(let i=0;i<final_out.length;i++)output.push(final_out[i].innerText);resolve(output)}else reject("mode is not one of scrapejs.TEXT or scrapejs.HTML");resolve(final_out)}))}))},requestDataById=function(dict,mode){return new Promise(((resolve,reject)=>{"string"!=typeof dict.address&&reject("address is not provided or is not a string type."),"string"!=typeof dict.id&&reject("id is not provided or is not a string type."),"boolean"!=typeof dict.loadScripts&&null!=dict.loadScripts&&reject("loadScripts should be boolean."),"boolean"!=typeof dict.loadStylesheets&&null!=dict.loadStylesheets&&reject("loadStylesheets should be boolean.");let url=dict.address.replace("&","[amp$").replace("=","[equ$");fetch("http://localhost/api.php?addr="+url+"&by=true").then((response=>response.text())).then((data_from_fetched=>{let data=data_from_fetched;if(data.includes(" />\n<br />\n<b>Warning</b>:"))throw"invalid request";let parseHTML=function(sText){try{if(null!=typeof window.DOMParser){var parser=new DOMParser;return null!=(doc=parser.parseFromString(sText,"text/html"))?doc:(sText=sText.replace(/&/gi,"and"),doc=parser.parseFromString(sText,"text/xml"))}var doc;return(doc=document.implementation.createHTMLDocument("")).write(sText),doc.close,doc}catch(err){throw"Error parsing html:\n"+err.message}},html=parseHTML(data),final_out=html.getElementById(dict.id),text="";if(dict.loadStylesheets)for(var stylesheets=html.getElementsByTagName("style"),i=0;i<stylesheets.length;i++)text+=stylesheets[i].outerHTML;if(dict.loadScripts){var scripts=html.getElementsByTagName("script");for(i=0;i<scripts.length;i++)scripts[i].src&&("/"!=scripts[i].src.charAt(0)&&"."!=scripts[i].src.charAt(0)||scripts[i].setAttribute("src",dict.address+"/"+scripts[i].src)),text+=scripts[i].outerHTML}"string"==typeof dict.src&&final_out.hasAttribute(dict.src)&&("/"!=final_out.getAttribute(dict.src).charAt(0)&&"."!=final_out.getAttribute(dict.src).charAt(0)||final_out.setAttribute(dict.src,dict.address+"/"+final_out.getAttribute(dict.src))),mode==scrapejs.HTML?((dict.loadScripts||dict.loadStylesheets)&&resolve(parseHTML('<div id="scrapedContent">'+text+final_out.outerHTML+"</div>").getElementById("scrapedContent")),resolve(final_out)):mode==scrapejs.TEXT?resolve(final_out.innerHTML.replace(/\<(\/?)(.*?)\>/g,"")):reject("mode is not one of scrapejs.TEXT or scrapejs.HTML")}))}))},getPage=function(url){return new Promise(((resolve,reject)=>{url=url.replace("&","[amp$").replace("=","[equ$"),fetch("http://localhost/api.php?addr="+url+"&by=true").then((response=>response.text())).then((data_from_fetched=>{let data=data_from_fetched,err=" />\n<br />\n<b>Warning</b>:";if(data.includes(" />\n<br />\n<b>Warning</b>:"))throw"invalid request";try{if(null!=typeof window.DOMParser){var parser=new DOMParser;if(null!=(doc=parser.parseFromString(data,"text/html")))var html=doc;else{data=data.replace(/&/gi,"and");html=doc=parser.parseFromString(data,"text/xml")}}else{var doc;(doc=document.implementation.createHTMLDocument("")).write(data),doc.close;html=doc}}catch(err){throw"Error parsing html:\n"+err.message}resolve(html)}))}))},getData=function(url){return new Promise(((resolve,reject)=>{url=url.replace("&","[amp$").replace("=","[equ$"),fetch("http://localhost/api.php?addr="+url+"&by=true").then((response=>response.text())).then((data_from_fetched=>{let data=data_from_fetched;if(data.includes(" />\n<br />\n<b>Warning</b>:"))throw"invalid request";resolve(data)}))}))},requestDataByClassnameSync=function(dict,mode,suppressErrors=!1){"string"!=typeof dict.address&&reject("address is not provided or is not a string type."),"string"!=typeof dict.class&&reject("class is not provided or is not a string type.");let url=dict.address.replace("&","[amp$").replace("=","[equ$"),request=new XMLHttpRequest;if(request.open("GET","http://localhost/api.php?addr="+url+"&by=true",!1),request.send(null),200===request.status){let err=" />\n<br />\n<b>Warning</b>:",data=request.responseText;if(data.includes(err))throw"invalid request";try{if(null!=typeof window.DOMParser){var parser=new DOMParser;if(null!=(doc=parser.parseFromString(data,"text/html")))var html=doc;else{data=data.replace(/\&/gi,"and");html=doc=parser.parseFromString(data,"text/xml")}}else{var doc;(doc=document.implementation.createHTMLDocument("")).write(data),doc.close;html=doc}}catch(err){throw"Error parsing html:\n"+err.message}let final_out=html.getElementsByClassName(dict.class);if(null==final_out&&!suppressErrors)throw"No elements found by the class "+dict.class;if(null==final_out&&suppressErrors)return;let output=[];if(mode!=scrapejs.HTML){if(mode==scrapejs.TEXT){for(let i=0;i<final_out.length;i++)output.push(final_out[i].innerText);return output}throw"mode is not one of scrapejs.TEXT or scrapejs.HTML"}return final_out}throw"Unsuccessful request";return!1},requestDataByIdSync=function(dict,mode){"string"!=typeof dict.address&&reject("address is not provided or is not a string type."),"string"!=typeof dict.id&&reject("id is not provided or is not a string type."),"boolean"!=typeof dict.loadScripts&&null!=dict.loadScripts&&reject("loadScripts should be boolean."),"boolean"!=typeof dict.loadStylesheets&&null!=dict.loadStylesheets&&reject("loadStylesheets should be boolean.");let url=dict.address.replace("&","[amp$").replace("=","[equ$"),request=new XMLHttpRequest;if(request.open("GET","http://localhost/api.php?addr="+url+"&by=true",!1),request.send(null),200===request.status){let data=request.responseText,err=" />\n<br />\n<b>Warning</b>:";if(data.includes(err))throw"invalid request";let parseHTML=function(sText){try{if(null!=typeof window.DOMParser){var parser=new DOMParser;return null!=(doc=parser.parseFromString(sText,"text/html"))?doc:(sText=sText.replace(/&/gi,"and"),doc=parser.parseFromString(sText,"text/xml"))}var doc;return(doc=document.implementation.createHTMLDocument("")).write(sText),doc.close,doc}catch(err){throw"unknown error"}},html=parseHTML(data),final_out=html.getElementById(dict.id),text="";if(dict.loadStylesheets)for(var stylesheets=html.getElementsByTagName("style"),i=0;i<stylesheets.length;i++)text+=stylesheets[i].outerHTML;if(dict.loadScripts){var scripts=html.getElementsByTagName("script");for(i=0;i<scripts.length;i++)scripts[i].src&&("/"!=scripts[i].src.charAt(0)&&"."!=scripts[i].src.charAt(0)||scripts[i].setAttribute("src",dict.address+"/"+scripts[i].src)),text+=scripts[i].outerHTML}if("string"==typeof dict.src&&final_out.hasAttribute(dict.src)&&("/"!=final_out.getAttribute(dict.src).charAt(0)&&"."!=final_out.getAttribute(dict.src).charAt(0)||final_out.setAttribute(dict.src,dict.address+"/"+final_out.getAttribute(dict.src))),mode!=scrapejs.HTML){if(mode==scrapejs.TEXT)return final_out.innerHTML.replace(/\<(\/?)(.*?)\>/g,"");throw"mode is not one of scrapejs.TEXT or scrapejs.HTML"}if(dict.loadScripts||dict.loadStylesheets)return parseHTML('<div id="scrapedContent">'+text+final_out.outerHTML+"</div>").getElementById("scrapedContent")}},getPageSync=function(url){url=url.replace("&","[amp$").replace("=","[equ$");let request=new XMLHttpRequest;if(request.open("GET","http://localhost/api.php?addr="+url+"&by=true",!1),request.send(null),200===request.status){let data=request.responseText,err=" />\n<br />\n<b>Warning</b>:";if(data.includes(err))throw"invalid request";try{if(null!=typeof window.DOMParser){var parser=new DOMParser;if(null!=(doc=parser.parseFromString(data,"text/html")))var html=doc;else{data=data.replace(/&/gi,"and");html=doc=parser.parseFromString(data,"text/xml")}}else{var doc;(doc=document.implementation.createHTMLDocument("")).write(data),doc.close;html=doc}}catch(err){throw"Error parsing html:\n"+err.message}return html}throw"invalid request"},getDataSync=function(url){url=url.replace("&","[amp$").replace("=","[equ$");let request=new XMLHttpRequest;if(request.open("GET","http://localhost/api.php?addr="+url+"&by=true",!1),request.send(null),200===request.status){let data=request.responseText,err=" />\n<br />\n<b>Warning</b>:";if(data.includes(err))throw"invalid request";return data}throw"invalid request"}):(requestDataByClassname=function(){return new Promise(((resolve,reject)=>{reject("No internet")}))},requestDataById=function(){return new Promise(((resolve,reject)=>{reject("No internet")}))},getPage=function(){return new Promise(((resolve,reject)=>{reject("No internet")}))},getData=function(){return new Promise(((resolve,reject)=>{reject("No internet")}))},requestDataByClassnameSync=function(){throw"no internet"},requestDataByIdSync=function(){throw"no internet"},getPageSync=function(){throw"no internet"},getDataSync=function(){throw"no internet"});
